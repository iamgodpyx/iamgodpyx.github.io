{"version":3,"file":"static/js/async/page.js","sources":["webpack://thrift-to-ts-online/./src/routes/globals.css?e1a7","/Users/didi/Desktop/github/thrift-to-ts-online/src/routes/page.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1742576746299\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.2.3_@swc+helpers@0.5.15/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useState } from \"react\";\nimport {\n  Controlled as CodeMirror,\n  UnControlled as CodeMirror2,\n} from \"react-codemirror2\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/dracula.css\"; // 使用 Dracula 主题\nimport \"codemirror/mode/javascript/javascript\"; // 引入 JavaScript 语法高亮\nimport { parser } from \"@/lib/thriftNew\";\nimport { print } from \"@/lib/thriftNew/print\";\nimport { prettier } from \"@/lib/tools/format\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport { Button } from \"@mui/material\";\n\nimport \"./globals.css\";\n\nconst START_THRIFT = `namespace java com.example.thrift\nnamespace py example.thrift\n\nconst string test = 'test'\n\n// 定义一个枚举类型，表示用户的状态\nenum UserStatus {\n    ACTIVE = 0,  // 用户活跃\n    INACTIVE = 1,  // 用户不活跃\n    SUSPENDED = 2,  // 用户被暂停\n    DELETED = 3  // 用户已删除\n}\n\n// 定义一个枚举类型，表示订单的状态\nenum OrderStatus {\n    PENDING = 0,  // 待处理\n    SHIPPED = 1,  // 已发货\n    DELIVERED = 2,  // 已送达\n    CANCELED = 3  // 已取消\n}\n\n// 定义一个复杂数据结构 - 用户\nstruct User {\n    1: required i32 user_id;  // 必选的用户ID\n    2: required string name;  // 必选的用户名\n    3: optional string email;  // 可选的电子邮件\n    4: required UserStatus status;  // 必选的用户状态\n    5: optional string phone_number;  // 可选的电话号码\n    6: required i64 created_at;  // 必选的创建时间\n    7: optional i64 last_login;  // 可选的最后登录时间\n    8: optional map<string, string> preferences;  // 可选的用户偏好设置\n    9: optional list<i32> friend_ids;  // 可选的朋友ID列表\n}\n\n// 定义一个复杂数据结构 - 地址\nstruct Address {\n    1: required string street;  // 必选的街道\n    2: required string city;  // 必选的城市\n    3: required string state;  // 必选的州\n    4: required string country;  // 必选的国家\n    5: required string zip_code;  // 必选的邮政编码\n    6: optional string phone_number;  // 可选的地址关联电话号码\n}\n\n// 定义一个复杂数据结构 - 订单\nstruct Order {\n    1: required i32 order_id;  // 必选的订单ID\n    2: required i32 user_id;  // 必选的用户ID（订单关联的用户）\n    3: required list<i32> product_ids;  // 必选的产品ID列表\n    4: required double total_amount;  // 必选的订单总金额\n    5: required OrderStatus status;  // 必选的订单状态\n    6: required i64 created_at;  // 必选的创建时间\n    7: optional string shipping_address;  // 可选的配送地址\n    8: optional Address billing_address;  // 可选的账单地址\n    9: optional i64 shipping_time;  // 可选的发货时间\n    10: optional list<string> order_notes;  // 可选的订单备注\n    11: optional map<string, string> order_metadata;  // 可选的订单元数据\n}\n\n// 定义一个复杂的数据结构 - 商品\nstruct Product {\n    1: required i32 product_id;  // 必选的商品ID\n    2: required string name;  // 必选的商品名称\n    3: required double price;  // 必选的商品价格\n    4: required string description;  // 必选的商品描述\n    5: optional string image_url;  // 可选的商品图片URL\n    6: optional bool in_stock;  // 可选的库存状态\n}\n\n// 定义一个复杂的数据结构 - 购物车\nstruct Cart {\n    1: required i32 cart_id;  // 必选的购物车ID\n    2: required i32 user_id;  // 必选的用户ID\n    3: required list<Product> products;  // 必选的商品列表\n    4: required double total_price;  // 必选的购物车总价格\n    5: optional i64 created_at;  // 可选的购物车创建时间\n    6: optional bool is_active;  // 可选的购物车是否有效\n}\n\n// 定义一个复杂的数据结构 - 支付信息\nstruct PaymentInfo {\n    1: required string payment_method;  // 必选的支付方式\n    2: required double amount;  // 必选的支付金额\n    3: required i64 payment_time;  // 必选的支付时间\n    4: optional string transaction_id;  // 可选的交易ID\n    5: optional string payment_status;  // 可选的支付状态\n}\n\n// 定义一个包含多个复杂结构的复杂数据结构\nstruct UserProfile {\n    1: required i32 user_id;  // 必选的用户ID\n    2: required string username;  // 必选的用户名\n    3: optional string avatar_url;  // 可选的头像URL\n    4: required string bio;  // 必选的个人简介\n    5: optional list<Address> addresses;  // 可选的地址列表\n    6: required list<Order> orders;  // 必选的订单列表\n    7: optional Cart cart;  // 可选的购物车\n    8: optional list<PaymentInfo> payment_history;  // 可选的支付历史\n}\n\nstruct MyStruct {\n\t1: optional string test\n}\n\nservice MyService {\n\tvoid ping()\n}\n\n// 服务接口，定义用户相关操作\nservice UserService {\n    // 创建新用户\n    void createUser(1: required string name, 2: required string email);\n\n    // 获取用户资料\n    UserProfile getUserProfile(1: required i32 user_id);\n\n    // 更新用户资料\n    void updateUserProfile(1: required i32 user_id, 2: required UserProfile user_profile);\n\n    // 获取用户的所有订单\n    list<Order> getUserOrders(1: required i32 user_id);\n\n    // 创建一个新的订单\n    void createOrder(1: required i32 user_id, 2: required list<i32> product_ids, 3: required double total_amount);\n\n    // 获取订单详情\n    Order getOrderDetails(1: required i32 order_id);\n}\n\n// 服务接口，定义订单相关操作\nservice OrderService {\n    // 创建新订单\n    void createOrder(1: required i32 user_id, 2: required list<i32> product_ids, 3: required double total_amount);\n\n    // 获取订单信息\n    Order getOrder(1: required i32 order_id);\n\n    // 更新订单状态\n    void updateOrderStatus(1: required i32 order_id, 2: required OrderStatus status);\n}\n\n// 服务接口，定义商品相关操作\nservice ProductService {\n    // 获取商品列表\n    list<Product> getProducts(1: required i32 page, 2: required i32 page_size);\n\n    // 获取单个商品详情\n    Product getProductDetails(1: required i32 product_id);\n}\n`;\n\nexport default function Home() {\n  const [thrift, setThrift] = useState(START_THRIFT);\n\n  const [tsCode, setTsCode] = useState(\"\");\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleChange = (editor: any, data: any, value: any) => {\n    setThrift(value);\n  };\n\n  const handleClick = async () => {\n    const ast = parser(\"\", thrift);\n    const tsCode = await print(ast);\n    // const result = await prettier(tsCode);\n    setTsCode(tsCode);\n  };\n  return (\n    <div className=\"App flex px-[15px] py-[15px] flex-col\">\n      <Tabs\n        value={0}\n        indicatorColor=\"secondary\"\n        textColor=\"inherit\"\n        aria-label=\"full width tabs example\"\n        sx={{\n          \".MuiTab-root\": {\n            textTransform: \"none\", // 禁用自动大写\n          },\n        }}\n      >\n        <Tab label=\"Thrift 转换 Typescript\" value={0} />\n        <Tab value={1} disabled />\n      </Tabs>\n\n      <div className=\"flex\">\n        <CodeMirror\n          value={thrift}\n          options={{\n            mode: \"javascript\", // 设置编辑器模式为 JavaScript\n            theme: \"dracula\", // 使用 Dracula 主题\n            lineNumbers: true, // 显示行号\n            indentUnit: 2, // 设置缩进空格为 2\n            tabSize: 2, // 设置 Tab 大小为 2\n            autoCloseBrackets: true, // 自动闭合括号\n            matchBrackets: true, // 匹配括号\n            showCursorWhenSelecting: true, // 选中时显示光标\n            lineWrapping: true,\n          }}\n          onBeforeChange={handleChange} // 每次编辑内容变化时更新 state\n        />\n        <div className=\"mx-[10px] flex\">\n          <Button\n            style={{ margin: \"auto\" }}\n            className=\"h-[30px]\"\n            variant=\"contained\"\n            onClick={handleClick}\n          >\n            转换\n          </Button>\n        </div>\n\n        <CodeMirror2\n          value={tsCode}\n          options={{\n            mode: \"javascript\", // 设置编辑器模式为 JavaScript\n            theme: \"dracula\", // 使用 Dracula 主题\n            lineNumbers: true, // 显示行号\n            indentUnit: 2, // 设置缩进空格为 2\n            tabSize: 2, // 设置 Tab 大小为 2\n            autoCloseBrackets: true, // 自动闭合括号\n            matchBrackets: true, // 匹配括号\n            showCursorWhenSelecting: true, // 选中时显示光标\n            readOnly: true,\n            lineWrapping: true,\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAuJA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;AAMA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAKA;AA9EA;AAAA"}